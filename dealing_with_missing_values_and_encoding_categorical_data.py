# -*- coding: utf-8 -*-
"""Dealing with missing values and encoding categorical data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hdqrn4C-m4cAnjHj7vsm1KnEDGm0GQQU

Dealing with missing values and encoding categorical data. Apply data transformation and normalization.
"""

import pandas as pd
import numpy as np

df = pd.read_csv("DataPrepro.csv")

df.head()

df.isnull().sum()

df.dtypes

df.info()

"""Concise:-

By above analysis using info(), dtypes(), isnull() we can see that data contains missing values and some entries are having special characters/wrong data instead of empty cells.

Now using uqique function at every column, we can check special characters/wrong data and we can replace these with NaN.
"""

df.head()

np.unique(df['MSSubClass'])

np.unique(df['LotConfig'])

np.unique(df['HouseStyle'])

"""Here we have special characters or wrong data like ':-', '?', '__' so identify all such wrong data and replace with NaN"""

df.replace([':-', '?', '__', '_', '#', "##", 'Na', 'Nan'], np.nan, inplace = True)

df.head()

"""As we can see all special characters or wrong data have been replaced by NaN, now we can apply drop/mean/median/mode/regression according to the requirement."""

df.isnull().sum()

import warnings
warnings.filterwarnings("ignore")

df['MSSubClass'].fillna(int(df['MSSubClass'].mode()), inplace=True)

df['LotFrontage'].fillna(int(df['LotFrontage'].mode()), inplace=True)

df['BldgType'].fillna('1Fam', inplace=True)

df['HouseStyle'].fillna('1Story', inplace=True)

df['OverallQual'].fillna(int(df['OverallQual'].mode()), inplace=True)

df['OverallCond'].fillna(int(df['OverallCond'].mode()), inplace=True)

df['RoofStyle'].fillna('Gable', inplace=True)

df['TotalBsmtSF'].fillna(int(df['TotalBsmtSF'].mean()), inplace=True)

df['BedroomAbvGr'].fillna(int(df['BedroomAbvGr'].mode()), inplace=True)

df['GarageArea'].fillna(int(df['GarageArea'].mean()), inplace=True)

df.isnull().sum()

"""Now there is no Null Values, now convert object dtype into int64 or float64"""

df.info()

df['LotFrontage']=df['LotFrontage'].astype('int64')

df['OverallQual']=df['OverallQual'].astype('int64')

df['OverallCond']=df['OverallCond'].astype('int64')

df['BedroomAbvGr']=df['BedroomAbvGr'].astype('int64')

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

df['LotConfig'] = label_encoder.fit_transform(df['LotConfig'])

df['Neighborhood'] = label_encoder.fit_transform(df['Neighborhood'])

df['BldgType'] = label_encoder.fit_transform(df['BldgType'])

df['HouseStyle'] = label_encoder.fit_transform(df['HouseStyle'])

df['RoofStyle'] = label_encoder.fit_transform(df['RoofStyle'])

df.head()

df.info()

df.to_excel('AfterPreprocssing1.xlsx')

"""Now all columns are numerical without any null value.

Now we will apply data transformation
"""

df.head()

"""We can construct a new attribute "House_Age" from the attribute "YearBuilt"
We can round off LotArea to the nearest 10
"""

from datetime import date
df.insert(11, "House_Age", date.today().year - df['YearBuilt'])

df['LotArea'] = df['LotArea'].apply(lambda x: 10*round(x/10))

df.head()

"""Data Normalization Data normalization involves converting all data variables into a given range. Techniques that are used for normalization are: Min-Max Normalization Z-Score Normalization Decimal Scaling

Convert LotArea in range from 10 to 50 using Min-Max Normalization
"""

Min = df['LotArea'].min()
Max = df['LotArea'].max()

df['LotArea'] = df['LotArea'].apply(lambda x: ((x-Min)*40/(Max-Min))+10)

df['LotArea'] = df['LotArea'].apply(np.floor)

"""Z-score normalization In this technique, values are normalized based on mean and standard deviation of the data."""

Mean = np.round(df['LotFrontage'].mean())

Std = df['LotFrontage'].std()

df['LotFrontage'] = df['LotFrontage'].apply(lambda x: ((x-Mean)/Std))

"""Decimal Scaling Method For Normalization To normalize the data by this technique, we divide each value of the data by the maximum absolute value of data. We are applying decimal scaling on "TotalBsmtSF"
"""

Maximum = df['TotalBsmtSF'].max()
digits = len(str(Maximum))
Abs = pow(10,digits)

df['TotalBsmtSF'] = df['TotalBsmtSF'].apply(lambda x: (x/Abs))

df.head()